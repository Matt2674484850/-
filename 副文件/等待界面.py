# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '等待界面.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sqlite3

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import requests
import re
from bs4 import BeautifulSoup
import random

class Ui_Wait_jiemian(QMainWindow):
    def setupUi(self, Wait_jiemian):
        Wait_jiemian.setObjectName("Wait_jiemian")
        Wait_jiemian.resize(520, 374)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/png/图片文件夹/等待.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Wait_jiemian.setWindowIcon(icon)
        Wait_jiemian.setStyleSheet("#Wait_jiemian{border-image: url(:/背景/图片文件夹/壁纸006.jpeg);}")
        self.Wait_gifpicture1 = QtWidgets.QLabel(Wait_jiemian)
        self.Wait_gifpicture1.setGeometry(QtCore.QRect(190, 50, 111, 91))
        self.Wait_gifpicture1.setStyleSheet("")
        self.Wait_gifpicture1.setText("")
        self.Wait_gifpicture1.setObjectName("Wait_gifpicture1")
        self.Wait_gifpicture2 = QtWidgets.QLabel(Wait_jiemian)
        self.Wait_gifpicture2.setGeometry(QtCore.QRect(280, 100, 151, 161))
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.Wait_gifpicture2.setFont(font)
        self.Wait_gifpicture2.setStyleSheet("")
        self.Wait_gifpicture2.setText("")
        self.Wait_gifpicture2.setObjectName("Wait_gifpicture2")
        self.Wait_textlable = QtWidgets.QLabel(Wait_jiemian)
        self.Wait_textlable.setGeometry(QtCore.QRect(90, 150, 181, 51))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(18)
        self.Wait_textlable.setFont(font)
        self.Wait_textlable.setStyleSheet("color: rgb(255, 0, 0);")
        self.Wait_textlable.setObjectName("Wait_textlable")
        self.Wait_lable = QtWidgets.QLabel(Wait_jiemian)
        self.Wait_lable.setGeometry(QtCore.QRect(10, 250, 81, 21))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(11)
        self.Wait_lable.setFont(font)
        self.Wait_lable.setObjectName("Wait_lable")
        self.Wait_inputlable = QtWidgets.QLabel(Wait_jiemian)
        self.Wait_inputlable.setGeometry(QtCore.QRect(100, 220, 241 , 111))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(11)
        self.Wait_inputlable.setFont(font)
        self.Wait_inputlable.setWordWrap(True)
        self.Wait_inputlable.setObjectName("Wait_inputlable")

        self.retranslateUi(Wait_jiemian)
        QtCore.QMetaObject.connectSlotsByName(Wait_jiemian)

    def retranslateUi(self, Wait_jiemian):
        _translate = QtCore.QCoreApplication.translate
        Wait_jiemian.setWindowTitle(_translate("Wait_jiemian", "等待界面"))
        self.Wait_textlable.setText(_translate("Wait_jiemian", "加载中，请等待"))
        self.Wait_lable.setText(_translate("Wait_jiemian", "每日格言："))
        list = []
        self.Wait_inputlable.setText(_translate("Wait_jiemian", "业精于勤荒于其，     行成于思毁于随"))
        _startPos = None
        _endPos = None
        _isTracking = False
        Wait_jiemian.setWindowFlags(QtCore.Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        # 使窗口居中
        screen = QDesktopWidget().screenGeometry()
        size = self.geometry()
        newLeft = (screen.width() - size.width()) // 2
        newTop = (screen.height() - size.height()) // 2
        self.move(newLeft, newTop)
        self.gif1 = QtGui.QMovie(":/png/图片文件夹/加载动画.gif")
        self.Wait_gifpicture1.setMovie(self.gif1)
        self.gif2 = QtGui.QMovie(":/png/图片文件夹/加载省略号.gif")
        self.Wait_gifpicture2.setMovie(self.gif2)
        self.gif1.start()
        self.gif2.start()
        conn = sqlite3.connect('C:/Users/Administrator/Desktop/六&七文件夹/副文件/考试复习系统数据.db')
        cursor = conn.cursor()
        cursor.execute('select * from 操作数据 where 操作命令 = "免爬虫等待"')
        result = cursor.fetchall()
        cursor.close()
        conn.close()
        for i in result:
            if i[2] == True:# 已经设置免爬虫等待
                string = '海纳百川有容乃大，臂力千仞无欲则刚。 --- 林则徐'
                self.Wait_inputlable.setText(_translate("Wait_jiemian", string))
            else:
                number = random.randint(1, 1296)
                self.spider(number)




    def spider(self,number):
        _translate = QtCore.QCoreApplication.translate
        kv = {'page': number}
        try:
            r = requests.get('https://mingyan.supfree.net/search.asp', params=kv)
            Ok = True
        except:
            Ok = False
        if Ok == True:
            try:
                r.raise_for_status()
                r.encoding = r.apparent_encoding
                html = r.text
                soup = BeautifulSoup(html, 'html.parser')
                soup1 = soup.find('table')
                stockInfo = soup1.find_all('a')
                str1 = str(stockInfo)
                contents = re.findall(r'<a href="honda\.asp\?id=\d+" target="_blank">(.*?)</a>', str1)
                authors = re.findall(r'<a href="toyota\.asp\?id=[\u4e00-\u9fa5]+" target="_blank">(.*?)</a>', str1)
                number = random.randint(0, 19)
            except:
                pass
            try:
                string = contents[number] + '---' + authors[number]
            except:
                string = '海纳百川有容乃大，臂力千仞无欲则刚。 --- 林则徐'
            self.Wait_inputlable.setText(_translate("Wait_jiemian", string))
        else:
            string = '海纳百川有容乃大，臂力千仞无欲则刚。 --- 林则徐'
            self.Wait_inputlable.setText(_translate("Wait_jiemian", string))



    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        try:
            self._endPos = e.pos() - self._startPos
            self.move(self.pos() + self._endPos)
        except:
            pass

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None

    def __init__(self):
        super(Ui_Wait_jiemian, self).__init__()
        self.setupUi(self)
