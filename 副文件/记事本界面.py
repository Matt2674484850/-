# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '记事本界面.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from datetime import  datetime
from 副文件 import img_rc
class Ui_JiShiBen(QMainWindow):
    def setupUi(self, JiShiBen):
        JiShiBen.setObjectName("JiShiBen")
        JiShiBen.resize(577, 552)
        font = QtGui.QFont()
        font.setFamily("楷体")
        JiShiBen.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/数据图标/图片文件夹/记事本 .png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        JiShiBen.setWindowIcon(icon)
        JiShiBen.setToolTipDuration(-1)
        JiShiBen.setAutoFillBackground(False)
        JiShiBen.setStyleSheet("#JiShiBen{border-image: url(:/背景/图片文件夹/壁纸 007.jpg);}")
        JiShiBen.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.centralwidget = QtWidgets.QWidget(JiShiBen)
        self.centralwidget.setObjectName("centralwidget")
        self.JSB_date = QtWidgets.QLabel(self.centralwidget)
        self.JSB_date.setGeometry(QtCore.QRect(350, 470, 81, 21))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(9)
        self.JSB_date.setFont(font)
        self.JSB_date.setObjectName("JSB_date")
        self.JSB_dateinput = QtWidgets.QLabel(self.centralwidget)
        self.JSB_dateinput.setGeometry(QtCore.QRect(450, 467, 111, 20))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        font.setUnderline(True)
        self.JSB_dateinput.setFont(font)
        self.JSB_dateinput.setObjectName("JSB_dateinput")
        self.JSB_textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.JSB_textBrowser.setGeometry(QtCore.QRect(30, 60, 491, 401))
        font = QtGui.QFont()
        font.setFamily("楷体")
        font.setPointSize(12)
        self.JSB_textBrowser.setFont(font)
        self.JSB_textBrowser.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.JSB_textBrowser.setStyleSheet("background-color: rgb(255, 255, 255,0);")
        self.JSB_textBrowser.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.JSB_textBrowser.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.JSB_textBrowser.setReadOnly(False)
        self.JSB_textBrowser.setObjectName("JSB_textBrowser")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, -10, 581, 31))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.JSB_lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.JSB_lineEdit.setGeometry(QtCore.QRect(178, 20, 261, 31))
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_lineEdit.setFont(font)
        self.JSB_lineEdit.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.JSB_lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.JSB_lineEdit.setStyleSheet("background-color: rgb(255, 255, 255,0);")
        self.JSB_lineEdit.setInputMask("")
        self.JSB_lineEdit.setText("")
        self.JSB_lineEdit.setMaxLength(12)
        self.JSB_lineEdit.setFrame(False)
        self.JSB_lineEdit.setObjectName("JSB_lineEdit")
        JiShiBen.setCentralWidget(self.centralwidget)
        self.JSB_toolBar = QtWidgets.QToolBar(JiShiBen)
        self.JSB_toolBar.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.JSB_toolBar.sizePolicy().hasHeightForWidth())
        self.JSB_toolBar.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_toolBar.setFont(font)
        self.JSB_toolBar.setAutoFillBackground(False)
        self.JSB_toolBar.setStyleSheet("background-color: rgb(255, 255, 255,0);")
        self.JSB_toolBar.setMovable(False)
        self.JSB_toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.JSB_toolBar.setFloatable(True)
        self.JSB_toolBar.setObjectName("JSB_toolBar")
        JiShiBen.addToolBar(QtCore.Qt.TopToolBarArea, self.JSB_toolBar)
        self.JSB_xinjian = QtWidgets.QAction(JiShiBen)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/新建日记.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_xinjian.setIcon(icon1)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_xinjian.setFont(font)
        self.JSB_xinjian.setObjectName("JSB_xinjian")
        self.JSB_baocun = QtWidgets.QAction(JiShiBen)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/记事本保存.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_baocun.setIcon(icon2)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_baocun.setFont(font)
        self.JSB_baocun.setObjectName("JSB_baocun")
        self.JSB_shanchu = QtWidgets.QAction(JiShiBen)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/记事本修改.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_shanchu.setIcon(icon3)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_shanchu.setFont(font)
        self.JSB_shanchu.setObjectName("JSB_shanchu")
        self.JSB_help = QtWidgets.QAction(JiShiBen)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/帮助.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_help.setIcon(icon4)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_help.setFont(font)
        self.JSB_help.setObjectName("JSB_help")
        self.JSB_tuichu = QtWidgets.QAction(JiShiBen)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/退出记事本.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_tuichu.setIcon(icon5)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_tuichu.setFont(font)
        self.JSB_tuichu.setObjectName("JSB_tuichu")
        self.JSB_open = QtWidgets.QAction(JiShiBen)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/记事本打开文件.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_open.setIcon(icon6)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_open.setFont(font)
        self.JSB_open.setObjectName("JSB_open")
        self.JSB_giveup = QtWidgets.QAction(JiShiBen)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/日记本图标/图片文件夹/记事本取消操作.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.JSB_giveup.setIcon(icon7)
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_giveup.setFont(font)
        self.JSB_giveup.setObjectName("JSB_giveup")
        self.JSB_toolBar.addAction(self.JSB_xinjian)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_open)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_baocun)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_shanchu)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_giveup)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_help)
        self.JSB_toolBar.addSeparator()
        self.JSB_toolBar.addAction(self.JSB_tuichu)

        self.retranslateUi(JiShiBen)
        QtCore.QMetaObject.connectSlotsByName(JiShiBen)
        JiShiBen.setTabOrder(self.JSB_textBrowser, self.JSB_lineEdit)

    def retranslateUi(self, JiShiBen):
        _translate = QtCore.QCoreApplication.translate
        JiShiBen.setWindowTitle(_translate("JiShiBen", "记事本"))
        self.JSB_date.setText(_translate("JiShiBen", "<html><head/><body><p><span style=\" font-weight:600;\">今天日期：</span></p></body></html>"))
        self.JSB_dateinput.setText(_translate("JiShiBen", "2022年3月26日"))
        self.JSB_textBrowser.setHtml(_translate("JiShiBen", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'楷体\'; font-size:12pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.JSB_textBrowser.setPlaceholderText(_translate("JiShiBen", "在这里输入记事内容"))
        self.JSB_lineEdit.setToolTip(_translate("JiShiBen", "<html><head/><body><p align=\"center\">标题栏（必填！限制12个字符）</p></body></html>"))
        self.JSB_lineEdit.setPlaceholderText(_translate("JiShiBen", "在这里输入您的标题（必填！限制12个字符）"))
        self.JSB_toolBar.setWindowTitle(_translate("JiShiBen", "JSB"))
        self.JSB_xinjian.setText(_translate("JiShiBen", "新建"))
        self.JSB_xinjian.setToolTip(_translate("JiShiBen", "新建(Ctrl+E)"))
        self.JSB_xinjian.setShortcut(_translate("JiShiBen", "Ctrl+E"))
        self.JSB_baocun.setText(_translate("JiShiBen", "保存"))
        self.JSB_baocun.setToolTip(_translate("JiShiBen", "保存文件(Ctrl+S)"))
        self.JSB_baocun.setShortcut(_translate("JiShiBen", "Ctrl+S"))
        self.JSB_shanchu.setText(_translate("JiShiBen", "删除"))
        self.JSB_shanchu.setToolTip(_translate("JiShiBen", "删除文件（Ctrl+D）"))
        self.JSB_shanchu.setShortcut(_translate("JiShiBen", "Ctrl+D"))
        self.JSB_help.setText(_translate("JiShiBen", "帮助"))
        self.JSB_help.setToolTip(_translate("JiShiBen", "帮助(Ctrl+H)"))
        self.JSB_help.setShortcut(_translate("JiShiBen", "Ctrl+H"))
        self.JSB_tuichu.setText(_translate("JiShiBen", "退出"))
        self.JSB_tuichu.setToolTip(_translate("JiShiBen", "退出记事本（Ctrl+B）"))
        self.JSB_tuichu.setShortcut(_translate("JiShiBen", "Ctrl+B"))
        self.JSB_open.setText(_translate("JiShiBen", "打开"))
        self.JSB_open.setToolTip(_translate("JiShiBen", "打开文件（Ctrl+O）"))
        self.JSB_open.setShortcut(_translate("JiShiBen", "Ctrl+O"))
        self.JSB_giveup.setText(_translate("JiShiBen", "取消"))
        self.JSB_giveup.setToolTip(_translate("JiShiBen", "取消操作（Ctrl+G）"))
        self.JSB_giveup.setShortcut(_translate("JiShiBen", "Ctrl+G"))
        JiShiBen.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.JSB_combobox = QtWidgets.QComboBox()
        font = QtGui.QFont()
        font.setFamily("楷体")
        self.JSB_combobox.setFont(font)
        self.JSB_combobox.setStyleSheet("color: rgb(0, 0, 0);background-color: rgb(255, 255, 255);")
        self.JSB_toolBar.addWidget(self.JSB_combobox)
        time = datetime.now()
        Year = (time.strftime('%y')) + '年'
        month = (time.strftime('%m')) + '月'
        date = (time.strftime('%d')) + '日'
        string = Year + month + date
        self.JSB_dateinput.setText(_translate("JiShiBen", string))
        self.JSB_dateinput.setToolTip(_translate("JiShiBen", string))
        self.JSB_toolBar.setMovable(False)
        _startPos = None
        _endPos = None
        _isTracking = False
        # 使窗口居中
        screen = QDesktopWidget().screenGeometry()
        size = self.geometry()
        newLeft = (screen.width() - size.width()) // 2
        newTop = (screen.height() - size.height()) // 2
        self.move(newLeft, newTop)

    def mouseMoveEvent(self, e: QMouseEvent):  # 重写移动事件
        try:
            self._endPos = e.pos() - self._startPos
            self.move(self.pos() + self._endPos)
        except:
            pass

    def mousePressEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = True
            self._startPos = QPoint(e.x(), e.y())

    def mouseReleaseEvent(self, e: QMouseEvent):
        if e.button() == Qt.LeftButton:
            self._isTracking = False
            self._startPos = None
            self._endPos = None

    def __init__(self):
        super(Ui_JiShiBen, self).__init__()
        self.setupUi(self)

